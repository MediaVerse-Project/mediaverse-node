<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
 -->
<config>
  <luceneMatchVersion>8.11.1</luceneMatchVersion>

  <lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

  <!--  Data Directory
        Used to specify an alternate directory to hold all index data other than the default ./data under the Solr home.  If
        replication is in use, this should match the replication configuration. -->
  <dataDir>${solr.data.dir:}</dataDir>
  
  <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!--  The CodecFactory for defining the format of the inverted index. -->
  <codecFactory class="solr.SchemaCodecFactory"/>

  <!-- <schemaFactory class="ClassicIndexSchemaFactory"/> -->

  <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.
       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
  <indexConfig>


    <!--  LockFactory
          This option specifies which Lucene LockFactory implementation to use.
         single = SingleInstanceLockFactory - suggested for a read-only index or when there is no possibility of another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking. Do not use when multiple solr webapps in the same JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise 'simple' is the default
     -->
    <lockType>${solr.lock.type:native}</lockType>
    
    <!--  Commit Deletion Policy
          Custom deletion policies can be specified here. The class must implement org.apache.lucene.index.IndexDeletionPolicy.
         The default Solr IndexDeletionPolicy implementation supports deleting index commit points on number of commits, age of commit point and optimized status.
         The latest commit point should always be preserved regardless of the criteria.
    -->
    <!-- <deletionPolicy class="solr.SolrDeletionPolicy"> -->
      <!-- The number of commit points to be kept  -->
      <!-- <str name="maxCommitsToKeep">1</str>  -->
      <!-- The number of optimized commit points to be kept  -->
      <!-- <str name="maxOptimizedCommitsToKeep">0</str>  -->
      <!-- Delete all commit points once they have reached the given age. Supports DateMathParser syntax e.g. -->
      <!-- <str name="maxCommitAge">30MINUTES</str> -->
      <!-- <str name="maxCommitAge">1DAY</str> -->
    <!-- </deletionPolicy> -->

    <!--  Lucene Infostream
          To aid in advanced debugging, Lucene provides an "InfoStream" of detailed information when indexing.
          Setting The value to true will instruct the underlying Lucene IndexWriter to write its debugging info the specified file
    -->
    <!--  <infoStream file="INFOSTREAM.txt">false</infoStream>  -->

  </indexConfig>

  <!-- JMX
      This example enables JMX if and only if an existing MBeanServer is found, use this if you want to configure JMX through JVM
      parameters. Remove this to disable exposing Solr configuration and statistics to JMX.
      For more details see http://wiki.apache.org/solr/SolrJmx
  -->
  <jmx/>
    <!--  If you want to connect to a particular server, specify the agentId -->
    <!--  <jmx agentId="myAgent" />  -->
    <!--  If you want to start a new MBeanServer, specify the serviceUrl  -->
    <!--  <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/> -->
    <!--  The default high-performance update handler  -->
  
  <updateHandler class="solr.DirectUpdateHandler2">
    <!--  Enables a transaction log, used for real-time get, durability, and and solr cloud replica recovery.  The log can grow as big as
          uncommitted changes to the index, so use of a hard autoCommit is recommended (see below).
          "dir" - the target directory for transaction logs, defaults to the solr data directory.
          "numVersionBuckets" - sets the number of buckets used to keep track of max version values when checking for re-ordered updates; 
                                increase this value to reduce the cost of synchronizing access to version buckets during high-volume
                                indexing, this requires 8 bytes (long) * numVersionBuckets of heap space per Solr core.
    -->
    <updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
      <int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
    </updateLog>
    
    <!--  AutoCommit
          Perform a hard commit automatically under certain conditions.
          Instead of enabling autoCommit, consider using "commitWithin" when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
       -->
    <autoCommit>
      <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
      <openSearcher>false</openSearcher>
    </autoCommit>
    
    <!--  softAutoCommit is like autoCommit except it causes a 'soft' commit which only ensures that changes are visible
          but does not ensure that data is synced to disk. This is faster and more near-realtime friendly than a hard commit. -->
    <autoSoftCommit>
      <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
    </autoSoftCommit>
    
    <!--  Update Related Event Listeners
          Various IndexWriter related events can trigger Listeners to take actions.
          postCommit - fired after every commit or optimize command
          postOptimize - fired after every optimize command
    -->
  </updateHandler>
  

  <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Query section - these settings control query time things like caches
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
  <query>
    <!--  Maximum number of clauses allowed when parsing a boolean query string.     
          This limit only impacts boolean queries specified by a user as part of a query string, 
          and provides per-collection controls on how complex user specified boolean queries can
          be.  Query strings that specify more clauses then this will result in an error.
          If this per-collection limit is greater then the global `maxBooleanClauses` limit specified in `solr.xml`, 
          it will have no effect, as that setting also limits the size of user specified boolean queries.
    -->
    <maxBooleanClauses>${solr.max.booleanClauses:1024}</maxBooleanClauses>
    <!--  Solr Internal Query Caches
          There are four implementations of cache available for Solr:
          LRUCache, based on a synchronized LinkedHashMap, LFUCache and FastLRUCache, based on a ConcurrentHashMap, and CaffeineCache - a modern and robust cache implementation. 
          Note that in Solr 9.0 only CaffeineCache will be available, other implementations are now deprecated.
          FastLRUCache has faster gets and slower puts in single threaded operation and thus is generally faster than LRUCache when the hit ratio of the cache is high (> 75%), 
          and may be faster under other scenarios on multi-cpu systems. Starting with Solr 9.0 the default cache implementation used is CaffeineCache.
    -->
    <!--  Filter Cache
          Cache used by SolrIndexSearcher for filters (DocSets), unordered sets of *all* documents that match a query.  When a new searcher is opened, 
          its caches may be prepopulated or "autowarmed" using data from caches in the old searcher.
          autowarmCount is the number of items to prepopulate.  For LRUCache, the autowarmed items will be the most recently accessed items.
          Parameters:
            class - the SolrCache implementation LRUCache or (LRUCache or FastLRUCache)
            size - the maximum number of entries in the cache
            initialSize - the initial capacity (number of entries) of the cache.  (see java.util.HashMap)
            autowarmCount - the number of entries to prepopulate from an old cache.
            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed to occupy. 
                        Note that when this option is specified, the size and initialSize parameters are ignored.
    -->
    <filterCache size="512" initialSize="512" autowarmCount="0"/>
    
    <!--  Query Result Cache
          Caches results of searches - ordered lists of document ids (DocList) based on a query, a sort, and the range of documents requested.
          Additional supported parameter by LRUCache:
            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed to occupy
    -->
    <queryResultCache size="512" initialSize="512" autowarmCount="0"/>
    
    <!--  Document Cache
          Caches Lucene Document objects (the stored fields for each document).  Since Lucene internal document ids are transient, this cache will not be autowarmed.
    -->
    <documentCache size="512" initialSize="512" autowarmCount="0"/>

    <!--  custom cache currently used by block join  -->
    <cache name="perSegFilter" size="10" initialSize="0" autowarmCount="10" regenerator="solr.NoOpRegenerator"/>
    
    <!--  Lazy Field Loading
          If true, stored fields that are not requested will be loaded lazily.  This can result in a significant speed improvement
          if the usual case is to not load all stored fields especially if the skipped fields are large compressed text fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <queryResultWindowSize>20</queryResultWindowSize>
    
    <!--  Maximum number of documents to cache for any entry in the queryResultCache. -->
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>


    <!--  Query Related Event Listeners
          Various IndexSearcher related events can trigger Listeners to take actions.

          newSearcher - fired whenever a new searcher is being prepared and there is a current searcher handling requests (aka registered).  
          It can be used to prime certain caches to prevent long request times for certain requests.
          firstSearcher - fired whenever a new searcher is being prepared but there is no current registered searcher to handle requests or to gain autowarming data from.
    -->
    
    <!--  QuerySenderListener takes an array of NamedList and executes a local query request for each NamedList in sequence. -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!-- <lst><str name="q">solr</str><str name="sort">price asc</str></lst> -->
        <!-- <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst> -->
      </arr>
    </listener>

    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!-- 
        <lst>
          <str name="q">static firstSearcher warming in solrconfig.xml</str>
        </lst>
        -->
      </arr>
    </listener>

    <!--  Use Cold Searcher
          If a search request comes in and there is no current registered searcher, then immediately register the still
          warming searcher and use it.  If "false" then all requests will block until the first searcher is done warming. -->
    <useColdSearcher>false</useColdSearcher>
  </query>

  <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Circuit Breaker Section - This section consists of configurations for circuit breakers
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
  <!--  Circuit Breakers
        Circuit breakers are designed to allow stability and predictable query execution. They prevent operations that can take down the node and cause noisy neighbour issues.
  -->
  <circuitBreakers enabled="true">
    <!--  Memory Circuit Breaker Configuration -->
    <!-- <memBreaker enabled="true" threshold="75"/> -->
    <!--  CPU Circuit Breaker Configuration -->
    <!-- <cpuBreaker enabled="true" threshold="75"/> -->
  </circuitBreakers>

  <!--  Request Dispatcher
        This section contains instructions for how the SolrDispatchFilter should behave when processing requests for this SolrCore.
  -->
  <requestDispatcher>
    <!--  Request Parsing
          These settings indicate how Solr Requests may be parsed, and what restrictions may be placed on the ContentStreams from those requests

          enableRemoteStreaming - enables use of the stream.file and stream.url parameters for specifying remote streams.
          multipartUploadLimitInKB - specifies the max size (in KiB) of Multipart File Uploads that Solr will allow in a Request.
          formdataUploadLimitInKB - specifies the max size (in KiB) of form data (application/x-www-form-urlencoded) sent via
                                    POST. You can use POST to pass request parameters not fitting into the URL.
         addHttpRequestToContext - if set to true, it will instruct the requestParsers to include the original HttpServletRequest
                                    object in the context map of the SolrQueryRequest under the key "httpRequest".
         *** WARNING ***
         Before enabling remote streaming, you should make sure your system has authentication enabled.
      -->
      <!-- <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="-1" formdataUploadLimitInKB="-1" addHttpRequestToContext="false"/> -->

    <!--  HTTP Caching
          Set HTTP caching related parameters (for proxy caches and clients).
          The options below instruct Solr not to output any HTTP Caching related headers
    -->
    <httpCaching never304="true"/>
    
    <!--  If you include a <cacheControl> directive, it will be used to generate a Cache-Control header (as well as an Expires header if the value contains "max-age=")
          By default, no Cache-Control header is generated. You can use the <cacheControl> option even if you have set never304="true"
    -->
    <!-- 
      <httpCaching never304="true" >
        <cacheControl>max-age=30, public</cacheControl>
      </httpCaching>
    -->
    
    <!--  To enable Solr to respond with automatically generated HTTP Caching headers, and to response to Cache Validation requests correctly, set the value of never304="false"
          This will cause Solr to generate Last-Modified and ETag headers based on the properties of the Index.
          The following options can also be specified to affect the values of these headers...
          lastModFrom - the default value is "openTime" which means the Last-Modified value (and validation against If-Modified-Since requests) will all be relative to when 
          the current Searcher was opened.  You can change it to lastModFrom="dirLastMod" if you want the value to exactly correspond to when the physical index was last modified.
          etagSeed="..." is an option you can change to force the ETag header (and validation against If-None-Match requests) to be different 
                          even if the index has not changed (ie: when making significant changes to your config file)
          (lastModifiedFrom and etagSeed are both ignored if you use the never304="true" option)
    -->
    <!-- 
      <httpCaching lastModifiedFrom="openTime" etagSeed="Solr">
        <cacheControl>max-age=30, public</cacheControl>
      </httpCaching>
    -->
  </requestDispatcher>
  
  <!--  SearchHandler
        For processing Search Queries, the primary Request Handler provided with Solr is "SearchHandler" It delegates to a sequent
        of SearchComponents (see below) and supports distributed queries across multiple shards
  -->
  <requestHandler name="/select" class="solr.SearchHandler">
    <!--  default values for query parameters can be specified, these will be overridden by parameters in the request -->
    <lst name="defaults">
    <str name="echoParams">explicit</str>
    <int name="rows">10</int>
      <!-- Default search field -->
      <!-- <str name="df">text</str> -->
      <!-- Change from JSON to XML format (the default prior to Solr 7.0) -->
      <!-- <str name="wt">xml</str> -->
    </lst>
    <!-- In addition to defaults, "appends" params can be specified to identify values which should be appended to the list of multi-val params 
          from the query (or the existing "defaults"). -->
    <!-- In this example, the param "fq=instock:true" would be appended to any query time fq params the user may specify, as a mechanism for
        partitioning the index, independent of any user selected filtering that may also be desired (perhaps as a result of faceted searching).
        NOTE: there is *absolutely* nothing a client can do to prevent these "appends" values from being used. -->
    <!-- 
      <lst name="appends">
        <str name="fq">inStock:true</str>
      </lst>
    -->
    <!--  "invariants" are a way of letting the Solr maintainer lock down the options available to Solr clients.  Any params values
          specified here are used regardless of what values may be specified in either the query, the "defaults", or the "appends" params.
          In this example, the facet.field and facet.query params would be fixed, limiting the facets clients can use.  Faceting is
          not turned on by default - but if the client does specify facet=true in the request, these are the only facets they
          will be able to see counts for; regardless of what other facet.field or facet.query params they may specify.
          NOTE: there is *absolutely* nothing a client can do to prevent these "invariants" values from being used.
    -->
    <!-- 
    <lst name="invariants">
      <str name="facet.field">cat</str>
      <str name="facet.field">manu_exact</str>
      <str name="facet.query">price:[* TO 500]</str>
      <str name="facet.query">price:[500 TO *]</str>
    </lst>
    -->
    <!--  If the default list of SearchComponents is not desired, that list can either be overridden completely, or components can be prepended or appended to the default list. -->
    <!-- 
      <arr name="components">
        <str>nameOfCustomComponent1</str>
        <str>nameOfCustomComponent2</str>
      </arr>
      -->
  </requestHandler>

  <!--  A request handler that returns indented JSON by default  -->
  <requestHandler name="/query" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="wt">json</str>
      <str name="indent">true</str>
    </lst>
  </requestHandler>
  
  <initParams path="/update/**,/query,/select,/spell">
    <lst name="defaults">
      <str name="df">_text_</str>
      <str name="update.chain">indexing</str>
    </lst>
  </initParams>

  <!--  Search Components
        Search components are registered to SolrCore and used by instances of SearchHandler (which can access them by name)
        By default, the following components are available:
          <searchComponent name="query"     class="solr.QueryComponent" />
          <searchComponent name="facet"     class="solr.FacetComponent" />
          <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
          <searchComponent name="highlight" class="solr.HighlightComponent" />
          <searchComponent name="stats"     class="solr.StatsComponent" />
          <searchComponent name="debug"     class="solr.DebugComponent" />
  -->
  
  <!--  Spell Check
       The spell check component can return a list of alternative spelling suggestions.
       http://wiki.apache.org/solr/SpellCheckComponent
  -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">
    <str name="queryAnalyzerFieldType">text</str>
    <!--  Multiple "Spell Checkers" can be declared and used by this component -->
    <!--  a spellchecker built from a field of the main index  -->
    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="field">_text_</str>
      <str name="classname">solr.DirectSolrSpellChecker</str>
      <!--  the spellcheck distance measure used, the default is the internal levenshtein  -->
      <str name="distanceMeasure">internal</str>
      <!--  minimum accuracy needed to be considered a valid spellcheck suggestion  -->
      <float name="accuracy">0.5</float>
      <!--  the maximum #edits we consider when enumerating terms: can be 1 or 2  -->
      <int name="maxEdits">2</int>
      <!--  the minimum shared prefix when enumerating terms  -->
      <int name="minPrefix">1</int>
      <!--  maximum number of inspections per result.  -->
      <int name="maxInspections">5</int>
      <!--  minimum length of a query term to be considered for correction  -->
      <int name="minQueryLength">4</int>
      <!--  maximum threshold of documents a query term can appear to be considered for correction  -->
      <float name="maxQueryFrequency">0.01</float>
      <!--  uncomment this to require suggestions to occur in 1% of the documents
      <float name="thresholdTokenFrequency">.01</float>
      -->
    </lst>
    <!--  a spellchecker that can break or combine words.  See "/spell" handler below for usage  -->
    <!-- 
    <lst name="spellchecker">
      <str name="name">wordbreak</str>
      <str name="classname">solr.WordBreakSolrSpellChecker</str>
      <str name="field">name</str>
      <str name="combineWords">true</str>
      <str name="breakWords">true</str>
      <int name="maxChanges">10</int>
    </lst>
    -->
  </searchComponent>

  <!--  A request handler for demonstrating the spellcheck component.-->
  <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <str name="spellcheck.dictionary">default</str>
      <str name="spellcheck">on</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.count">10</str>
      <str name="spellcheck.alternativeTermCount">5</str>
      <str name="spellcheck.maxResultsForSuggest">5</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.collateExtendedResults">true</str>
      <str name="spellcheck.maxCollationTries">10</str>
      <str name="spellcheck.maxCollations">5</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <!--  Terms Component
        A component to return terms and document frequency of those terms -->
  <searchComponent name="terms" class="solr.TermsComponent"/>
  
  <!--  A request handler for demonstrating the terms component  -->
  <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="terms">true</bool>
      <bool name="distrib">false</bool>
    </lst>
    <arr name="components">
      <str>terms</str>
    </arr>
  </requestHandler>

  <!--  Highlighting Component -->
  <searchComponent class="solr.HighlightComponent" name="highlight">
    <highlighting>
      <!--  Configure the standard fragmenter  -->
      <!--  This could most likely be commented out in the "default" case  -->
      <fragmenter name="gap" default="true" class="solr.highlight.GapFragmenter">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>
      <!--  A regular-expression-based fragmenter (for sentence extraction) -->
      <fragmenter name="regex" class="solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!--  slightly smaller fragsizes work better because of slop  -->
          <int name="hl.fragsize">70</int>
          <!--  allow 50% slop on fragment sizes  -->
          <float name="hl.regex.slop">0.5</float>
          <!--  a basic sentence pattern  -->
          <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
        </lst>
      </fragmenter>
      <!--  Configure the standard formatter  -->
      <formatter name="html" default="true" class="solr.highlight.HtmlFormatter">
        <lst name="defaults">
          <str name="hl.simple.pre"> <![CDATA[ <em> ]]> </str>
          <str name="hl.simple.post"> <![CDATA[ </em> ]]> </str>
        </lst>
      </formatter>
      <!--  Configure the standard encoder  -->
      <encoder name="html" class="solr.highlight.HtmlEncoder"/>
      <!--  Configure the standard fragListBuilder  -->
      <fragListBuilder name="simple" class="solr.highlight.SimpleFragListBuilder"/>
      <!--  Configure the single fragListBuilder  -->
      <fragListBuilder name="single" class="solr.highlight.SingleFragListBuilder"/>
      <!--  Configure the weighted fragListBuilder  -->
      <fragListBuilder name="weighted" default="true" class="solr.highlight.WeightedFragListBuilder"/>
      <!--  default tag FragmentsBuilder  -->
      <fragmentsBuilder name="default" default="true" class="solr.highlight.ScoreOrderFragmentsBuilder">
        <!-- 
          <lst name="defaults">
            <str name="hl.multiValuedSeparatorChar">/</str>
          </lst>
        -->
      </fragmentsBuilder>
      <!--  multi-colored tag FragmentsBuilder  -->
      <fragmentsBuilder name="colored" class="solr.highlight.ScoreOrderFragmentsBuilder">
        <lst name="defaults">
          <str name="hl.tag.pre">
            <![CDATA[ <b style="background:yellow">,<b style="background:lawgreen">, <b style="background:aquamarine">,<b style="background:magenta">, <b style="background:palegreen">,<b style="background:coral">, <b style="background:wheat">,<b style="background:khaki">, <b style="background:lime">,<b style="background:deepskyblue"> ]]>
          </str>
          <str name="hl.tag.post">
            <![CDATA[ </b> ]]>
          </str>
        </lst>
      </fragmentsBuilder>
      <boundaryScanner name="default" default="true" class="solr.highlight.SimpleBoundaryScanner">
        <lst name="defaults">
          <str name="hl.bs.maxScan">10</str>
          <str name="hl.bs.chars">.,!? </str>
        </lst>
      </boundaryScanner>
      <boundaryScanner name="breakIterator" class="solr.highlight.BreakIteratorBoundaryScanner">
        <lst name="defaults">
          <!--  type should be one of CHARACTER, WORD(default), LINE and SENTENCE  -->
          <str name="hl.bs.type">WORD</str>
          <!--  language and country are used when constructing Locale object.   -->
          <!--  And the Locale object will be used when getting instance of BreakIterator  -->
          <str name="hl.bs.language">en</str>
          <str name="hl.bs.country">US</str>
        </lst>
      </boundaryScanner>
    </highlighting>
  </searchComponent>

  <!--  Update Processors
        Chains of Update Processor Factories for dealing with Update Requests can be declared, and then used by name in Update Request Processors
        http://wiki.apache.org/solr/UpdateRequestProcessor 
  -->
  <updateProcessor class="solr.UUIDUpdateProcessorFactory" name="uuid"/>
  <updateProcessor class="solr.RemoveBlankFieldUpdateProcessorFactory" name="remove-blank"/>
  <updateProcessor class="solr.FieldNameMutatingUpdateProcessorFactory" name="field-name-mutating">
    <str name="pattern">[^\w-\.]</str>
    <str name="replacement">_</str>
  </updateProcessor>
  <updateProcessor class="solr.ParseBooleanFieldUpdateProcessorFactory" name="parse-boolean"/>
  <updateProcessor class="solr.ParseLongFieldUpdateProcessorFactory" name="parse-long"/>
  <updateProcessor class="solr.ParseDoubleFieldUpdateProcessorFactory" name="parse-double"/>
  <updateProcessor class="solr.ParseDateFieldUpdateProcessorFactory" name="parse-date">
    <arr name="format">
      <str>yyyy-MM-dd['T'[HH:mm[:ss[.SSS]][z</str>
      <str>yyyy-MM-dd['T'[HH:mm[:ss[,SSS]][z</str>
      <str>yyyy-MM-dd HH:mm[:ss[.SSS]][z</str>
      <str>yyyy-MM-dd HH:mm[:ss[,SSS]][z</str>
      <str>[EEE, ]dd MMM yyyy HH:mm[:ss] z</str>
      <str>EEEE, dd-MMM-yy HH:mm:ss z</str>
      <str>EEE MMM ppd HH:mm:ss [z ]yyyy</str>
    </arr>
  </updateProcessor>

  <updateProcessor class="solr.AddSchemaFieldsUpdateProcessorFactory" name="add-schema-fields">
    <lst name="typeMapping">
      <str name="valueClass">java.lang.String</str>
      <str name="fieldType">text</str>
      <lst name="copyField">
        <str name="dest">*_str</str>
        <int name="maxChars">256</int>
      </lst>
      <!--  Use as default mapping instead of defaultFieldType  -->
      <bool name="default">true</bool>
    </lst>
    <lst name="typeMapping">
      <str name="valueClass">java.lang.Boolean</str>
      <str name="fieldType">booleans</str>
    </lst>
    <lst name="typeMapping">
      <str name="valueClass">java.util.Date</str>
      <str name="fieldType">pdates</str>
    </lst>
    <lst name="typeMapping">
      <str name="valueClass">java.lang.Long</str>
      <str name="valueClass">java.lang.Integer</str>
      <str name="fieldType">plongs</str>
    </lst>
    <lst name="typeMapping">
      <str name="valueClass">java.lang.Number</str>
      <str name="fieldType">pdoubles</str>
    </lst>
  </updateProcessor>

  <updateProcessor class="solr.LangDetectLanguageIdentifierUpdateProcessorFactory" name="detect-language">
    <bool name="langid">true</bool>
    <str name="langid.fl">description</str>
    <str name="langid.langField">language</str>
    <str name="langid.whitelist">en,es,fr,el,ca,de,pt,it,ar,eu,tr</str>
    <str name="langid.fallback">unk</str>
    <str name="langid.threshold">0.25</str>
    <bool name="langid.overwrite">true</bool>
    <bool name="langid.map">true</bool>
    <bool name="langid.map.keepOrig">true</bool>
    <bool name="langid.map.individual">true</bool>
  </updateProcessor>

  <updateProcessor class="solr.processor.SignatureUpdateProcessorFactory" name="generate-signature">
    <bool name="enabled">true</bool>
    <bool name="overwriteDupes">false</bool>
    <str name="signatureField">signature</str>
    <str name="fields">description</str>
    <str name="signatureClass">solr.processor.Lookup3Signature</str>
  </updateProcessor>

  <updateRequestProcessorChain name="langid" processor="detect-language">
    <processor class="solr.LogUpdateProcessorFactory"/>
    <processor class="solr.DistributedUpdateProcessorFactory"/>
    <processor class="solr.RunUpdateProcessorFactory"/>
  </updateRequestProcessorChain>

  <!--  The update.autoCreateFields property can be turned to false to disable schemaless mode -->
  <updateRequestProcessorChain name="add-unknown-fields-to-the-schema" default="${update.autoCreateFields:true}" processor="uuid,remove-blank,field-name-mutating,parse-boolean,parse-long,parse-double,parse-date,add-schema-fields">
    <processor class="solr.LogUpdateProcessorFactory"/>
    <processor class="solr.DistributedUpdateProcessorFactory"/>
    <processor class="solr.RunUpdateProcessorFactory"/>
  </updateRequestProcessorChain>

  <!--  Deduplication
        An example dedup update processor that creates the "id" field on the fly based on the hash code of some other fields.  This
        example has overwriteDupes set to false since we are using the id field as the signatureField and Solr will maintain uniqueness based on that anyway.
  <updateRequestProcessorChain name="dedup">
    <processor class="solr.processor.SignatureUpdateProcessorFactory">
      <bool name="enabled">true</bool>
      <bool name="overwriteDupes">false</bool>
      <str name="signatureField">signature</str>
      <str name="fields">description</str>
      <str name="signatureClass">solr.processor.Lookup3Signature</str>
    </processor>
    <processor class="solr.LogUpdateProcessorFactory" />
    <processor class="solr.RunUpdateProcessorFactory" />
  </updateRequestProcessorChain>
  -->
  
  <updateRequestProcessorChain name="indexing" processor="detect-language,generate-signature">
    <processor class="solr.LogUpdateProcessorFactory"/>
    <processor class="solr.DistributedUpdateProcessorFactory"/>
    <processor class="solr.RunUpdateProcessorFactory"/>
  </updateRequestProcessorChain>

  <!-- Response Writers -->
  <!-- The following response writers are implicitly configured unless overridden... -->
  <!-- 
  <queryResponseWriter name="xml" default="true" class="solr.XMLResponseWriter" />
  <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
  <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
  <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
  <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
  <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
  <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
  <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
  -->
  
  <queryResponseWriter name="json" class="solr.JSONResponseWriter">
    <!--  For the purposes of the tutorial, JSON responses are written as plain text so that they are easy to read in *any* browser.
          If you expect a MIME type of "application/json" just remove this override. -->
    <str name="content-type">text/plain; charset=UTF-8</str>
  </queryResponseWriter>

</config>